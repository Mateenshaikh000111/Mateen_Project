@Library('my-shared-library') _

pipeline {
    agent any

    parameters {
        choice(name: 'action', choices: 'Create\nDelete', description: 'choose Create/Destroy')
        string(name: 'aws_account_id', description: "AWS account ID", defaultValue: '807783742011')
        string(name: 'region', description: "region for Build", defaultValue: 'us-east-2')
        string(name: 'ecr_repoName', description: "name of the Application", defaultValue: 'mateenshaikh00')
    
    }

    stages {
        stage('Git Checkout') {
            when {
                expression { params.action == 'Create' }
            }
            steps {
                timeout(time: 30, unit: 'MINUTES') {
                    gitCheckout(
                        branch: "main",
                        url: "https://github.com/Mateenshaikh000111/Mateen_Project.git"
                    )
                }
            }
        }

        // stage('Unit Test Maven') {
        //     when {
        //         expression { params.action == 'Create' }
        //     }
        //     steps {
        //         timeout(time: 30, unit: 'MINUTES') {
        //             script {
        //                 mvnTest()
        //             }
        //         }
        //     }
        // }

        // stage('Integration Test Maven') {
        //     when {
        //         expression { params.action == 'Create' }
        //     }
        //     steps {
        //         timeout(time: 30, unit: 'MINUTES') {
        //             script {
        //                 mvnintegrationTest()
        //             }
        //         }
        //     }
        // }

        // stage('Static Code Analysis Sonarqube') {
        //     when {
        //         expression { params.action == 'Create' }
        //     }
        //     steps {
        //         timeout(time: 30, unit: 'MINUTES') {
        //             script {
        //                 def SonarQubecredentialsId = 'SonarQube_API'
        //                 StaticCodeAnalysis(SonarQubecredentialsId)
        //             }
        //         }
        //     }
        // }

        // stage('Quality gate status') {
        //     when {
        //         expression { params.action == 'Create' }
        //     }
        //     steps {
        //         timeout(time: 20, unit: 'MINUTES') {
        //             script {
        //                 def SonarQubecredentialsId = 'SonarQube_API'
        //                 QualityGateStatus(SonarQubecredentialsId)
        //             }
        //         }
        //     }
        // }

        stage('Maven Build : maven') {
            when {
                expression { params.action == 'Create' }
            }
            steps {
                timeout(time: 10, unit: 'MINUTES') {
                    script {
                        mvnBuild()
                    }
                }
            }
           }
                   stage('Docker image Build:ECR ') {
            when {
                expression { params.action == 'Create' }
            }
            steps {
                timeout(time: 10, unit: 'MINUTES') {
                    script {

                        dockerBuild("${params.aws_account_id}","${params.region}","${params.ecr_repoName}")
                    }
                }
            }
             }
              stage('Docker image Scan: trivy ') {
            when {
                expression { params.action == 'Create' }
            }
            steps {
                timeout(time: 10, unit: 'MINUTES') {
                    script {

                        dockerimageScan("${params.aws_account_id}","${params.region}","${params.ecr_repoName}")
                    }
                }
            }
        }
                stage('Docker image Push : ECR') {
            when {
                expression { params.action == 'Create' }
            }
            steps {
                timeout(time: 10, unit: 'MINUTES') {
                    script {

                        dockerImagePush("${params.aws_account_id}","${params.region}","${params.ecr_repoName}")
                    }
                }
            }
        }
                        stage('Docker image CleanUP: ECR ') {
            when {
                expression { params.action == 'Create' }
            }
            steps {
                timeout(time: 10, unit: 'MINUTES') {
                    script {

                        dockerimageCleanup("${params.aws_account_id}","${params.region}","${params.ecr_repoName}")
                    }
                }
            }
        }
    }
    }
